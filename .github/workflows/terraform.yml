name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on: 
  push: 
    branches:
    - main
    paths:
    - terraform/**
  pull_request:
    branches:
    - main
    paths:
    - terraform/**

env: 
  TF_LOG: INFO ##DEBUG
  TF_LOG_CORE: INFO
  TF_LOG_PROVIDER: INFO
  TF_ACC_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3 #previously#1.3.0
      
      - name: Terraform init
        id: init
        run: terraform init ##-backend-config="bucket=$BUCKET_TF_STATE"

      - name: Sleep for 5 secondes
        run: sleep 5s
        shell: bash
        
      - name: Terraform version
        id: version
        run: terraform version

      - name: Sleep for 5 secondes
        run: sleep 5s
        shell: bash
        
      - name: Terraform Providers
        id: providers
        run: terraform providers
        
      - name: Sleep for 5 secondes
        run: sleep 5s
        shell: bash
        
      - name: Terraform format
        id: fmt
        run: terraform fmt ##-check

      - name: Sleep for 5 secondes
        run: sleep 5s
        shell: bash
        
      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Sleep for 5 secondes
        run: sleep 5s
        shell: bash
        
      - name: Terraform plan
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      #- name: Sleep for 3 minutes #3 minutes
      #  run: sleep 180s #180s
      #  shell: bash

      #- name: Terraform Destroy
      #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #  run: terraform destroy -auto-approve -input=false
